1. Name four everyday examples of a queue other than those discussed during lecture.
    i. A line at a grocery store
    ii. A line at a bank
    iii. A line at a movie theater
    iv. A line at a restaurant
2. What is the difference between a queue and stack?
    i. A queue is a FIFO data structure, while a stack is a LIFO data structure.

3. Use the following code segment to answer parts (a) through (c):

   Queue<Integer> q = new Queue<Integer>(); Scanner keyIn = new Scanner(System.in); for (int i = 1; i <= 5; i++)
   {
              if (keyIn.nextBoolean())
                   System.out.print(i + " ");
              else
                   q.enqueue(i);
   } }
        while (!q.isEmpty())
              System.out.print(q.dequeue() + " ");
        System.out.println();

  a) What is the output for the following input sequence?
        true false true true true
     Ans: 1 3 4 5 2

  b) Is it possible to have output: 1 3 5 4 2? If yes, give an input sequence that produces the output; or else, provide justification to your answer.
     Ans: No, it is not possible. The queue is a FIFO data structure, so the first element to be dequeued will be the first element to be enqueued.

  c) Give at least three input sequences that produce the output: 1 2 3 4 5
        Ans: true true true true true
             false false false false false
             true true true false false

  4. Hand trace a queue X through the following operations:

     X.enqueue(new Integer(14));
     X.enqueue(new Integer(3));
     X.enqueue(new Integer(5));
     Object Y = X.dequeue();
     X.enqueue(new Integer(7));
     X.enqueue(new Integer(9));
     Y = X.dequeue();
     X.enqueue(new Integer(2));
     X.enqueue(new Integer(4));

     X: 5 7 9 2 4
     Y: 3

     Given the resulting queue X above, what would be the result of each of the following?
     a) X.front();
        Ans: 5

     b) X.dequeue();
        X.enqueue(new Integer(10));
        X.front();
        Ans: 7

     c) Y = X.dequeue();
        Ans: 7

     d) X.front();
        Ans: 9

  5. Provide and explain three operations / functions of Linked List based Queue that you can add to the GenericQueue class, other than those discussed in the lecture (i.e., enqueue, dequeue and getSize â€“ from Slide 10 in the lecture slide).
        Ans:
        i. isEmpty() - returns true if the queue is empty, false otherwise
        ii. clear() - clears the queue
        iii. contains(Object o) - returns true if the queue contains the specified element, false otherwise
        iv. peek() - returns the element at the front of the queue without removing it
        v. remove(Object o) - removes the specified element from the queue
        vi. toArray() - returns an array containing all of the elements in the queue in proper sequence
        vii. toString() - returns a string representation of the queue
        viii. equals(Object o) - returns true if the specified object is equal to the queue, false otherwise
        ix. hashCode() - returns the hash code value for the queue
        x. iterator() - returns an iterator over the elements in the queue
        xi. offer(Object o) - inserts the specified element into the queue
        xii. poll() - retrieves and removes the head of the queue, or returns null if the queue is empty
        xiii. remove() - retrieves and removes the head of the queue
        xiv. add(Object o) - inserts the specified element into the queue
        xv. element() - retrieves, but does not remove, the head of the queue
        xvi. addAll(Collection c) - adds all of the elements in the specified collection to the queue
        xvii. containsAll(Collection c) - returns true if the queue contains all of the elements of the specified collection, false otherwise
        xviii. removeAll(Collection c) - removes all of the elements of the specified collection from the queue
        xix. retainAll(Collection c) - retains only the elements in the queue that are contained in the specified collection
        xx. toArray(T[] a) - returns an array containing all of the elements in the queue in proper sequence; the runtime type of the returned array is that of the specified array
        xxi. removeFirst() - removes and returns the first element from the queue
        xxii. removeLast() - removes and returns the last element from the queue
        xxiii. getFirst() - returns the first element in the queue
        xxiv. getLast() - returns the last element in the queue
        xxv. peekFirst() - returns the first element in the queue without removing it
        xxvi. peekLast
